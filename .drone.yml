kind: pipeline
type: docker
name: lint-files

platform:
  os: linux
  arch: amd64

steps:
  - name: lint_dockerfiles
    pull: if-not-exists
    image: hadolint/hadolint:latest-alpine
    commands:
      - hadolint Dockerfile

---
kind: pipeline
type: docker
name: build and push images

platform:
  os: linux
  arch: amd64

depends_on:
  - lint-files

trigger:
  event:
    exclude:
      - promote

steps:
  - name: push image to docker hub
    image: plugins/docker
    settings:
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      repo: sever3d/expressdroneapp
      tags:
        - latest
        - ${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - master

  - name: push image to quay.io
    image: plugins/docker
    settings:
      registry: quay.io
      username:
        from_secret: QUAY_USERNAME # From Quay.io Robot
      password:
        from_secret: QUAY_PASSWORD
      repo: quay.io/sewerynmi/expressdroneapp
      file: Dockerfile
      tags:
        - latest
        - ${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - master

---
kind: pipeline
type: docker
name: promotion-check

platform:
  os: linux
  arch: amd64

trigger:
  event:
    - promote

steps:
  - name: branch-check
    pull: if-not-exists
    image: alpine:latest
    commands:
      - echo Cannot promote from non 'master' branch
      - exit 1
    when:
      branch:
        exclude:
          - master

  - name: environment-check
    pull: if-not-exists
    image: alpine:latest
    commands:
      - echo Cannot promote to a non prod environment
      - exit 1
    when:
      target:
        exclude:
          - production

---
kind: pipeline
type: docker
name: deploy to K8S

platform:
  os: linux
  arch: amd64

depends_on:
  - promotion-check

trigger:
  event:
    - promote
  target:
    - production

steps:
  - name: deploy to linode K8S
    image: pelotech/drone-helm3
    settings:
      namespace: app
      mode: upgrade
      chart: ./helm
      values:
        - image.tag=${DRONE_COMMIT_SHA}
      values_files:
        - ./helm/values/dev-values.yaml
      release: expressdroneapp
      kube_certificate:
        from_secret: KUBERNETES_CERTIFICATE_PROD
      kube_api_server:
        from_secret: KUBERNETES_SERVER_PROD
      kube_token:
        from_secret: KUBERNETES_TOKEN_PROD

---
kind: pipeline
type: docker
name: build notifications

trigger:
  status:
    - success
    - failure

depends_on:
  - build and push images

slack: &slack
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_webhook_url
    channel: drone-pipelines
    username: Drone

steps:
  - name: slack_build
    <<: *slack
    settings:
      template: |
        {{#success build.status}}
          <${DRONE_BUILD_LINK}|Build #{{ build.number }}> succeeded! :tada:
        {{else}}
          <${DRONE_BUILD_LINK}|Build #{{ build.number }}> failed :broken_heart:
        {{/success}}
        Commit: <${DRONE_REPO_LINK}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}> - {{{ trim build.message }}}
        Repo: {{ repo.name }}
        Branch: <${DRONE_REPO_LINK}/commits/{{ build.branch }}|{{ build.branch }}>
        Author: {{ build.author }}
    when:
      event:
        - push

  - name: slack_deploy
    <<: *slack
    settings:
      template: >
        {{#success build.status}}
          :rocket: Successful *{{uppercasefirst build.deployTo}}* deployment for *{{repo.name}}* <${DRONE_BUILD_LINK}| build #{{build.number}}>.          
        {{else}}
          :zombie: Problem *{{uppercasefirst build.deployTo}}* deployment failed for *{{repo.name}}* <${DRONE_BUILD_LINK}| build #{{build.number}}>.
        {{/success}}
    when:
      event:
        - promote
